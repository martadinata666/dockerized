variables:
  CI_DOCKERHUB_REGISTRY_IMAGE: "martadinata666/docker-swarm-visualizer-rs"
  GITHUB_REPO_NAME: "yandeu/docker-swarm-visualizer-rs"
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  CARGO_TARGET_DIR: "$CI_PROJECT_DIR/target"
  npm_config_cache: "$CI_PROJECT_DIR/.npm-cache"
  # Static build success break email function due libssl issue
  RUSTFLAGS: "-Ctarget-feature=+crt-static"
  #OPENSSL_STATIC: "1"
  CARGO_TERM_COLOR: "always"
  SCCACHE_ENDPOINT: "192.168.0.2:9000"
  SCCACHE_REGION: "us-east-1"
  SCCACHE_BUCKET: "sccache"
  RUSTC_WRAPPER: "/usr/local/bin/sccache"
  DEV: ""

stages:
  - build-bin
  - dockerize
  - dev

build-js:
  image: 192.168.0.2:5050/dedyms/node:lts-dev
  stage: build-bin
  cache:
    key: "$CI_COMMIT_REF_SLUG-js"
    paths:
      - .npm-cache/
    policy: pull-push
  before_script:
    #- export RELEASE=$(curl --silent "https://api.github.com/repos/${GITHUB_REPO_NAME}/releases/latest" | jq -r .tag_name)
    #- echo $RELEASE
    - git clone --depth=1 https://github.com/${GITHUB_REPO_NAME}.git dsv-rs
  script:
    - sudo npm install -g typescript
    - cd dsv-rs/www
    - tsc
  artifacts:
    paths:
      - dsv-rs/www
  only:
    changes:
      - Dockerfile.ci


build-dsv-rs:
  image: 192.168.0.2:5050/dedyms/rust:latest
  stage: build-bin
  cache:
    key: "$TARGET"
    paths:
      - $CI_PROJECT_DIR/target
      - $CI_PROJECT_DIR/.cargo/registry/index
      - $CI_PROJECT_DIR/.cargo/registry/cache
      - $CI_PROJECT_DIR/.cargo/git/db
    policy: pull-push
  before_script:
    - export SCCACHE_S3_KEY_PREFIX="dsv-rs-$TARGET"
    #- export RELEASE=$(curl --silent "https://api.github.com/repos/${GITHUB_REPO_NAME}/releases/latest" | jq -r .tag_name)
    - export RELEASE="git"
    - echo $RELEASE
    - git clone --depth=1 https://github.com/${GITHUB_REPO_NAME}.git dsv-rs
  script:
    - cd dsv-rs
    - rustc --version
    - cargo build --target="$TARGET" --release
    - sccache --show-stats
    - ls -al $CI_PROJECT_DIR/target/$TARGET/release
  artifacts:
    paths:
      - $CI_PROJECT_DIR/target/$TARGET/release/docker-swarm-visualizer-rs
  only:
    changes:
      - Dockerfile.ci
  parallel:
    matrix:
      - TARGET: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]


buildx-stable:
  # Official docker image.
  image: 192.168.0.2:5050/dedyms/docker-with-buildx:latest
  needs: ["build-dsv-rs","build-js"]
  stage: dockerize
  #services:
  #  - docker:dind
  before_script:
    #- apk add curl jq
    #- export RELEASE=$(curl --silent "https://api.github.com/repos/$GITHUB_REPO_NAME/releases/latest" | jq -r .tag_name)
    - export RELEASE="git"
    - echo $RELEASE
    - export DATE=$(date +%Y%m%d)
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$CI_DOCKERHUB_REGISTRY_USER" -p "$CI_DOCKERHUB_REGISTRY_PASSWORD" $CI_DOCKERHUB_REGISTRY
#    - docker run --rm --privileged 192.168.0.2:5050/dedyms/docker-binfmt-qemu:sid
  script:
    - docker buildx create --use --config buildx-config.toml
    #- docker buildx create --append --name nginx-builder node-arm64
    - docker buildx inspect --bootstrap
#    - docker buildx build --push --platform linux/amd64 -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE:$RELEASE" . -f Dockerfile
    - docker buildx build --build-arg RELEASE=$RELEASE --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE:$RELEASE" -t "$CI_DOCKERHUB_REGISTRY_IMAGE" -t "$CI_DOCKERHUB_REGISTRY_IMAGE:$RELEASE" . -f Dockerfile.ci
  after_script:
    - docker buildx stop
    - docker buildx rm -f
  only:
    changes:
      - Dockerfile.ci

#remoteVersion=$(curl -s "https://gitlab.com/api/v4/projects/25444008/repository/commits?per_page=1&page=1"  | jq -r '.[0].short_id')
#localVersion=$(curl -s "https://gitlab.com/api/v4/projects/19217373/repository/files/version/raw?ref=master")
#if [[ ! $remoteVersion == $localVersion ]]; then
#  echo "Updating to commit $remoteVersion"
#  curl --request PUT --header "PRIVATE-TOKEN: $PAT_TOKEN" \
#     --header "Content-Type: application/json" \
#     --data '{"branch": "master", "author_email": "update@bocki.bot", "author_name": "Update Bot",
#       "content": "'"$remoteVersion"'", "commit_message": "Update to '$remoteVersion'"}' \
#     "https://gitlab.com/api/v4/projects/19217373/repository/files/version"
#else
#  echo "Up to date"
#fi

#The following ARG variables are set automatically:
#    TARGETPLATFORM - platform of the build result. Eg linux/amd64, linux/arm/v7, windows/amd64.
#    TARGETOS - OS component of TARGETPLATFORM
#    TARGETARCH - architecture component of TARGETPLATFORM
#    TARGETVARIANT - variant component of TARGETPLATFORM
#    BUILDPLATFORM - platform of the node performing the build.
#    BUILDOS - OS component of BUILDPLATFORM
#    BUILDARCH - architecture component of BUILDPLATFORM
#    BUILDVARIANT - variant component of BUILDPLATFORM
#These arguments are defined in the global scope so are not automatically available inside build stages or for your RUN commands.
#To expose one of these arguments inside the build stage redefine it without value.


buildx-dev:
  image: 192.168.0.2:5050/dedyms/docker-with-buildx:latest
  stage: dev
  before_script:
    - export RELEASE="dev"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker run --rm --privileged 192.168.0.2:5050/dedyms/docker-binfmt-qemu:sid
  script:
    - docker buildx create --use --config buildx-config.toml
    - docker buildx inspect --bootstrap
    - docker buildx build --push --platform linux/amd64 -t "$CI_REGISTRY_IMAGE:$RELEASE" . -f Dockerfile.dev
  after_script:
    - docker buildx stop
    - docker buildx rm
  only:
    variables:
      - $DEV == "true"
    changes:
      - Dockerfile.dev
