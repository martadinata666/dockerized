variables:
  CI_DOCKERHUB_REGISTRY_IMAGE: "martadinata666/jellyfin"
  TYPE: ""
  npm_config_cache: "$CI_PROJECT_DIR/.npm-cache"
  YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/.yarn-cache"
  GITHUB_REPO_NAME: "jellyfin/jellyfin"


stages:
  - build
  - dockerize
  - other

create-web-stable:
  image: 192.168.0.2:5050/dedyms/node:lts-dev
  stage: build
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .npm-cache/
    policy: pull-push
  before_script:
    - sudo apt update
    - sudo apt install -y --no-install-recommends gifsicle python-is-python3 jq
    - export RELEASE=$(curl --silent "https://api.github.com/repos/$GITHUB_REPO_NAME/releases/latest" | jq -r .tag_name)
    - echo $RELEASE
    - git clone --depth=1 -b $RELEASE https://github.com/jellyfin/jellyfin-web.git jellyfin-web
  script:
    - cd jellyfin-web
    - npm -d -timeout=9999999 ci --no-audit --unsafe-perm
    - ls -alh ./
  #after_script:
  #  - docker buildx stop
  #  - docker buildx rm
  artifacts:
    paths:
      - jellyfin-web/dist
  only:
    #refs:
    #  - master
    variables:
      - $TYPE == "stable"
    #changes:
    #  - .gitlab-ci.yml

create-jellyfin-stable:
  image: 192.168.0.2:5050/dedyms/dotnet:6
  stage: build
  before_script:
    - sudo apt update
    - sudo apt install -y jq
    - export RELEASE=$(curl --silent "https://api.github.com/repos/$GITHUB_REPO_NAME/releases/latest" | jq -r .tag_name)
    - echo $RELEASE
    - git clone --depth=1 -b $RELEASE https://github.com/jellyfin/jellyfin.git jellyfin-src
  script:
    - cd jellyfin-src
    # Tweak for our self build ffmpeg
    - sed -i 's/-hwaccel qsv/-hwaccel_output_format qsv/g' MediaBrowser.Controller/MediaEncoding/EncodingHelper.cs
    - dotnet publish Jellyfin.Server --disable-parallel --configuration Release --output="${CI_PROJECT_DIR}/jellyfin" --self-contained --runtime linux-x64 -p:DebugSymbols=false -p:DebugType=none
  artifacts:
    paths:
      - jellyfin
  only:
    variables:
      - $TYPE == "stable"


buildx-stable:
  # Official docker image.
  image: 192.168.0.2:5050/dedyms/docker-with-buildx:latest
  stage: dockerize
  #services:
  #  - docker:dind
  before_script:
    - sudo apt update
    - sudo apt install -y jq
    - export RELEASE=$(curl --silent "https://api.github.com/repos/$GITHUB_REPO_NAME/releases/latest" | jq -r .tag_name)
    - echo $RELEASE
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$CI_DOCKERHUB_REGISTRY_USER" -p "$CI_DOCKERHUB_REGISTRY_PASSWORD" $CI_DOCKERHUB_REGISTRY
    - docker run --rm --privileged 192.168.0.2:5050/dedyms/docker-binfmt-qemu:sid
  script:
    - docker buildx create --use --config buildx-config.toml --name "$CI_PROJECT_NAME-stable" --driver-opt image=moby/buildkit:"$BUILDKIT_VERSION"
    - docker buildx inspect --bootstrap
#    - docker buildx build --push --platform linux/amd64  
#      -t "$CI_REGISTRY_IMAGE" 
#      -t "$CI_REGISTRY_IMAGE:$RELEASE" 
#      -t "$CI_REGISTRY_IMAGE:stable" 
#      -t "$CI_DOCKERHUB_REGISTRY_IMAGE" 
#      -t "$CI_DOCKERHUB_REGISTRY_IMAGE:$RELEASE" 
#      -t "$CI_DOCKERHUB_REGISTRY_IMAGE:stable" . -f Dockerfile
    - docker buildx build --push --platform linux/amd64  
      -t "$CI_REGISTRY_IMAGE" 
      -t "$CI_REGISTRY_IMAGE:$RELEASE" 
      -t "$CI_REGISTRY_IMAGE:stable"  . -f Dockerfile
  after_script:
    - docker buildx stop
    - docker buildx rm -f
  only:
    refs:
      - master
    changes:
      - Dockerfile
    variables:
      - $TYPE == "stable"
