# This file is a template, and might need editing before it works on your project.
variables:
  RELEASE: ""
  SCHEDULE_TYPE: ""
  DATE: ""
  VERSION: nvm
  FFMPEG_VERSION: 6
  CI_DOCKERHUB_REGISTRY_IMAGE: "martadinata666/node"

stages:
  - create-base-image
  - create-dev-image

buildx-node:
  cache: {}
  # Official docker image.
  stage: create-base-image
  image: 192.168.0.2:5050/dedyms/docker-with-buildx:latest
  before_script:
    - export DATE=$(date +%Y%m%d)
    - export RELEASE=$(curl --silent "https://api.github.com/repos/nodejs/node/releases" | jq -r 'first(.[] | select(.name | contains("LTS"))) | .tag_name')
    - export NODE_RELEASE=$(echo $RELEASE | cut -c2-)
    - export SHORT_NODE_RELEASE=$(echo $RELEASE | cut -c2-3)
    - export NVM_RELEASE=$(curl --silent "https://api.github.com/repos/nvm-sh/nvm/releases/latest" | jq -r .tag_name)
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#    - docker login -u "$CI_DOCKERHUB_REGISTRY_USER" -p "$CI_DOCKERHUB_REGISTRY_PASSWORD" $CI_DOCKERHUB_REGISTRY
    - docker run --rm --privileged 192.168.0.2:5050/dedyms/docker-binfmt-qemu:sid
  script:
    - docker buildx create --use --config buildx-config.toml --driver-opt image=moby/buildkit:"$BUILDKIT_VERSION"
    - docker buildx inspect --bootstrap
#    - docker buildx build --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE:14" -t "$CI_DOCKERHUB_REGISTRY_IMAGE:14" . -f 14/Dockerfile
#    - docker buildx build --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE:16" -t "$CI_DOCKERHUB_REGISTRY_IMAGE:16" . -f 16/Dockerfile
#    - docker buildx build --build-arg NODE_RELEASE=$NODE_RELEASE --build-arg NVM_RELEASE=$NVM_RELEASE --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE:$SHORT_NODE_RELEASE" -t "$CI_REGISTRY_IMAGE:lts" . -f "$VERSION"/Dockerfile
#    - docker buildx build --build-arg NODE_RELEASE=$NODE_RELEASE --build-arg NVM_RELEASE=$NVM_RELEASE --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE:$SHORT_NODE_RELEASE-dev" -t "$CI_REGISTRY_IMAGE:lts-dev" . -f "$VERSION"/Dockerfile.dev
    - docker buildx build --build-arg NODE_RELEASE=$NODE_RELEASE --build-arg NVM_RELEASE=$NVM_RELEASE --build-arg FFMPEG_VERSION=$FFMPEG_VERSION --push --platform linux/amd64 -t "$CI_REGISTRY_IMAGE:$SHORT_NODE_RELEASE-ffmpeg" -t "$CI_REGISTRY_IMAGE:lts-ffmpeg" . -f "$VERSION"/Dockerfile.ffmpeg
#    - docker buildx build --push --platform linux/arm64,linux/amd64 -t "$CI_REGISTRY_IMAGE:$VERSION" -t "$CI_DOCKERHUB_REGISTRY_IMAGE:$VERSION" -t "$CI_REGISTRY_IMAGE:lts" -t "$CI_DOCKERHUB_REGISTRY_IMAGE:lts" . -f $VERSION/Dockerfile
  after_script:
    - docker buildx stop
    - docker buildx rm -f
  #except:
  #  - schedules
  only:
    - triggers
