#syntax=docker/dockerfile:1.4
FROM php:8.1.0-fpm-alpine
ENV TZ=Asia/Jakarta
# Ton of additional modules
RUN apk add --virtual .build-deps \
    $PHPIZE_DEPS \
    git \
    curl \
    autoconf \
    freetype-dev \
    icu-dev \
    libevent-dev \
    libjpeg-turbo-dev \
    libmcrypt-dev \
    libpng-dev\
    libldap-dev \
    libmemcached-dev \
    libxml2-dev \
    libzip-dev \
    postgresql-dev \
    imagemagick-dev \
    libwebp-dev \
    gmp-dev \
    pcre-dev \
    musl-libintl \
    samba-dev \
    bzip2-dev  \
    libx11-dev && \
    docker-php-ext-configure gd --with-freetype -with-jpeg --with-webp && \
    docker-php-ext-install \
         bcmath \
         exif \
         gd \
         intl \
         opcache \
         pcntl \
         pdo_mysql \
         pdo_pgsql \
         gettext \
         gmp \
         zip \
         mysqli \
         ldap \
         bz2 && \
    pecl install apcu && \
    pecl install inotify && \
    pecl install memcached && \
    pecl install redis && \
    pecl install smbclient && \
    pecl install imagick && \
    apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing dlib && \
    git clone --depth=1 https://github.com/goodspb/pdlib.git /usr/src/php/ext/pdlib && \
    docker-php-ext-configure pdlib && \
    docker-php-ext-install pdlib && \
    docker-php-ext-enable apcu memcached redis smbclient imagick inotify && \
    runDeps="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
            | tr ',' '\n' \
            | sort -u \
            | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )" && \
    apk add --no-cache --virtual .php-ext-runtime $runDeps tzdata imagemagick bash && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    apk del .build-deps && \
    rm -rf /var/cache/apk/* && \
    docker-php-source delete

#Add tini entrypoint
RUN apt update && apt install -y tini && apt clean && rm -rf /var/lib/apt/lists/*
ENTRYPOINT ["/sbin/tini", "-g", "--", "docker-php-entrypoint"]

# Enable normal user support
COPY www.conf /usr/local/etc/php-fpm.d/www.conf
ENV CONTAINERUSER=fpm
RUN adduser --disabled-password --uid 1000 $CONTAINERUSER $CONTAINERUSER && chown fpm:fpm /var/www/html
USER $CONTAINERUSER
VOLUME /var/www/html
CMD ["php-fpm", "--nodaemonize"]
