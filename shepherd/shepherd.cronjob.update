#!/bin/bash
set -euo pipefail

server_version() {
  docker version -f "{{.Server.Version}}"
}

logger() {
  local log="$1"
  local is_verbose_log="${2:-false}"

  if [[ "$is_verbose_log" ]]; then
    echo "$(date) $log"
  fi
}

in_list() {
  local list="$1"
  local searched_item="$2"

  for item in $list; do
    [[ "$item" == "$searched_item" ]] && echo "true"
  done

  echo "false"
}

update_services() {
  local ignorelist="$1"
  local supports_detach_option=$2
  local supports_registry_auth=$3
  local supports_insecure_registry=$4
  local supports_no_resolve_image=$5
  local image_autoclean_limit=$6
  local detach_option=""
  local registry_auth=""
  local insecure_registry_flag=""
  local no_resolve_image_flag=""
  local name
  local apprise_sidecar_url="${APPRISE_SIDECAR_URL:-}"
  local notification_url="${NOTIFICATION_URL:-}"
  local user="${USER:-}"
  local avatar_url="${AVATAR_URL:-}"
  local hostname
  hostname="${HOSTNAME:-$(hostname)}"

  [ $supports_detach_option = true ] && detach_option="--detach=false"
  [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"
  [ $supports_insecure_registry = true ] && insecure_registry_flag="--insecure"
  [ $supports_no_resolve_image = true ] && no_resolve_image_flag="--no-resolve-image"

  if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            title="Schedule started"
            body="Scanning service\n$(date +%a,\ %d\ %b\ %Y\ -\ %R:%S\ %Z)"
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
  fi

  for name in $(IFS=$'\n' docker service ls --quiet --filter "${FILTER_SERVICES}" --format '{{.Name}}'); do

    if [[ "$(in_list "$ignorelist" "$name")" != "false" ]]; then
      continue # continue with next service
    fi

    local image_with_digest image auth_config config_flag

    image_with_digest="$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
    image=$(echo "$image_with_digest" | cut -d@ -f1)
    auth_config=$(docker service inspect "$name" -f '{{index .Spec.Labels "shepherd.auth.config"}}')
    if [[ -z "$auth_config" ]]; then
      config_flag=()
    else
      config_flag=(--config "$auth_config")
    fi

    if ! docker manifest inspect $insecure_registry_flag $image > /dev/null && ! docker buildx imagetools inspect --raw $image > /dev/null; then
           logger "Error updating service $name! Image $image does not exist or it is not available"
           title="$name service update error"
           body=" Image $image used by service $name does not exist or it is not available\n$image\n$(date +%a,\ %d\ %b\ %Y\ -\ %R:%S\ %Z)"
         if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
         fi

    else
        logger "Trying to update service $name with image $image" "true"
        # shellcheck disable=SC2086
        if ! docker "${config_flag[@]}" service update "$name" $detach_option $registry_auth $no_resolve_image_flag ${UPDATE_OPTIONS} --image="$image" > /dev/null; then
          logger "Service $name update failed on $hostname!"
          if [[ "${ROLLBACK_ON_FAILURE+x}" ]]; then
            logger "Rolling $name back"
            # shellcheck disable=SC2086
            docker "${config_flag[@]}" service update "$name" $detach_option $registry_auth $no_resolve_image_flag --rollback > /dev/null
          fi
            title="[Shepherd] Service $name update failed on $hostname"
            body="$(date) Service $name failed to update to $(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
            if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
              notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
              curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
            fi
          continue # continue with next service
        fi

        local previous_image current_image
        previousImage=$(docker service inspect "$name" -f '{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
        currentImage=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')
        if [ "$previousImage" == "$currentImage" ]; then
          logger "No updates to service $name!" "true"
          title="Service $name scanned"
          body="No updates available to service $name \n$image\n$(date +%a,\ %d\ %b\ %Y\ -\ %R:%S\ %Z)"
          if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          fi
        else
          logger "Service $name was updated!"
          title="Service $name updated"
          body="service $name was updated from $previousImage to $currentImage\n$image\n$(date +%a,\ %d\ %b\ %Y\ -\ %R:%S\ %Z)"
          if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          fi
          if [[ "$image_autoclean_limit" != "" ]]; then
            logger "Cleaning up old docker images, leaving last $image_autoclean_limit"
            img_name=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}' | awk -F':' '{print $1}')
            image_ids=$(docker images -aq --filter=reference=$img_name)
            image_ids_count=$(echo $image_ids | wc -w)
            if [[ $image_ids_count > $image_autoclean_limit ]]; then
              docker container prune -f
              docker rmi $(echo $image_ids | xargs -n 1 | tail -n $(expr $image_ids_count - $image_autoclean_limit))
            fi
          fi
        fi
      fi
  done
}

# retrieve registry password from docker secrets or environment, in this order
get_registry_password() {
  local password_file_path="/run/secrets/shepherd_registry_password"
  if [[ -f "$password_file_path" ]]; then
    cat "$password_file_path"
  else
    echo "${REGISTRY_PASSWORD:-}"
  fi
}

main() {
  local sleep_time supports_detach_option supports_registry_auth tz verbose image_autoclean_limit ignorelist
  local registry_user=""
  local registry_password=""
  ignorelist="${IGNORELIST_SERVICES:-}"
  verbose="${VERBOSE:-true}"
  image_autoclean_limit="${IMAGE_AUTOCLEAN_LIMIT:-}"
  logger "Timezone set to $TZ"
  local apprise_sidecar_url="${APPRISE_SIDECAR_URL:-}"
  local notification_url="${NOTIFICATION_URL:-}"
  local user="${USER:-}"
  local avatar_url="${AVATAR_URL:-}"
  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    logger "Enabling synchronous service updates"
  fi

  supports_registry_auth=false
  if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
     supports_registry_auth=true
     logger "Send registry authentication details to swarm agents"
  fi

  supports_insecure_registry=false
  if [[ ${WITH_INSECURE_REGISTRY+x} ]]; then
    supports_insecure_registry=true
    logger "Connection to insecure registry available"
  fi

  supports_no_resolve_image=false
  if [[ ${WITH_NO_RESOLVE_IMAGE+x} ]]; then
    supports_no_resolve_image=true
    logger "Deployment without resolving image"
  fi

  [[ "$ignorelist" != "" ]] && logger "Excluding services: $ignorelist"

  update_services "$ignorelist" "$supports_detach_option" "$supports_registry_auth" "$supports_insecure_registry" "$supports_no_resolve_image" "$image_autoclean_limit"
    title="Scan finished"
    body="All services updated, Good bye!"
    	if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url&user=$user&format=markdown"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          fi
}

main "$@"
