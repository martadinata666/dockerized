#!/bin/bash
set -euo pipefail

server_version() {
  docker version -f "{{.Server.Version}}"
}

logger() {
  local log="$1"
  local is_verbose_log="${2:-false}"

  if [[ "$is_verbose_log" == "true" && "$verbose" == "true" || "$is_verbose_log" == "false" ]]; then
    echo "$(date) $log"
  fi
}

update_services() {
  local blacklist="$1"
  local supports_detach_option=$2
  local supports_registry_auth=$3
  local supports_insecure_registry=$4
  local supports_no_resolve_image=$5
  local image_autoclean_limit=$6
  local detach_option=""
  local registry_auth=""
  local insecure_registry_flag=""
  local no_resolve_image_flag=""
  local name
  local apprise_sidecar_url="${APPRISE_SIDECAR_URL:-}"
  local notification_url="${NOTIFICATION_URL:-}"
  local userid="${USERID:-}"
  local avatar_url="${AVATAR_URL:-}"

  [ $supports_detach_option = true ] && detach_option="--detach=false"
  [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"
  [ $supports_insecure_registry = true ] && insecure_registry_flag="--insecure"
  [ $supports_no_resolve_image = true ] && no_resolve_image_flag="--no-resolve-image"

  if [[ "$apprise_sidecar_url" != "" && "$notification_url" != "" ]]; then
            title="Shepherd started"
            body="Scanning service \n $(date)"
            if [[ "$avatar_url" == "" ]]; then
               curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
            else
               notification_url_avatar="$notification_url/?avatar_url=$avatar_url"
               #echo $notification_url_avatar
               curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
           fi
  fi

  for name in $(IFS=$'\n' docker service ls --quiet --filter "${FILTER_SERVICES}" --format '{{.Name}}'); do
    local image_with_digest image
    if [[ " $blacklist " != *" $name "* ]]; then
      image_with_digest="$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
      image=$(echo "$image_with_digest" | cut -d@ -f1)

      if ! DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $insecure_registry_flag $image > /dev/null; then
        logger "Error updating service $name! Image $image does not exist or it is not available"
      else
        logger "Trying to update service $name with image $image" "true"

        docker service update "$name" $detach_option $registry_auth $no_resolve_image_flag --image="$image" > /dev/null

        previousImage=$(docker service inspect "$name" -f '{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
        currentImage=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')
        if [ "$previousImage" == "$currentImage" ]; then
          logger "No updates to service $name!" "true"
          title="$name scanned"
          body="No updates to $name \n$(date)"
          if [[ "$apprise_sidecar_url" != "" && "$avatar_url" == "" ]]; then
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          #elif [[ "$apprise_sidecar_url" != "" && "$avatar_url" != ""]]; then
          else
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          fi
        else
          logger "Service $name was updated!"
          title="$name updated"
          body="$name service was updated from $previousImage to $currentImage \n$(date)"
          if [[ "$apprise_sidecar_url" != "" && "$avatar_url == """ ]]; then
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
          elif [[ "$apprise_sidecar_url" != "" && "$avatar_url" != "" ]]; then
            notification_url_avatar="$notification_url/?avatar_url=$avatar_url"
            curl -X POST -H "Content-Type: application/json" --data "{\"urls\":\"$notification_url_avatar\",\"title\": \"$title\", \"body\": \"$body\"}" "$apprise_sidecar_url"
        fi

          if [[ "$image_autoclean_limit" != "" ]]; then
            logger "Cleaning up old docker images, leaving last $image_autoclean_limit"
            img_name=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}' | awk -F':' '{print $1}')
            image_ids=$(docker images -aq --filter=reference=$img_name)
            image_ids_count=$(echo $image_ids | wc -w)
            if [[ $image_ids_count > $image_autoclean_limit ]]; then
              docker container prune -f
              docker rmi $(echo $image_ids | xargs -n 1 | tail -n $(expr $image_ids_count - $image_autoclean_limit))
            fi
          fi
        fi
      fi
    fi
  done
}

main() {
  local blacklist sleep_time supports_detach_option supports_registry_auth tz verbose image_autoclean_limit
  blacklist="${BLACKLIST_SERVICES:-}"
  sleep_time="${SLEEP_TIME:-30s}"
  verbose="${VERBOSE:-true}"
  image_autoclean_limit="${IMAGE_AUTOCLEAN_LIMIT:-}"
  TZ="Asia/Jakarta"
  FILTER_SERVICES=""
  logger "Timezone set to $TZ"

  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    logger "Enabling synchronous service updates"
  fi

  supports_registry_auth=false
  if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
    supports_registry_auth=true
    logger "Send registry authentication details to swarm agents"
  fi

  supports_insecure_registry=false
  if [[ ${WITH_INSECURE_REGISTRY+x} ]]; then
    supports_insecure_registry=true
    logger "Connection to insecure registry available"
  fi

  supports_no_resolve_image=false
  if [[ ${WITH_NO_RESOLVE_IMAGE+x} ]]; then
    supports_no_resolve_image=true
    logger "Deployment without resolving image"
  fi

  [[ "$blacklist" != "" ]] && logger "Excluding services: $blacklist"

  if [[ ${RUN_ONCE_AND_EXIT+x} ]]; then
    update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth" "$supports_insecure_registry" "$supports_no_resolve_image" "$image_autoclean_limit"
  else
    while true; do
      update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth" "$supports_insecure_registry" "$supports_no_resolve_image" "$image_autoclean_limit"
      logger "Sleeping $sleep_time before next update" "true"
      sleep "$sleep_time"
    done
  fi
}

main "$@"
